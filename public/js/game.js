// Generated by CoffeeScript 1.3.3
(function() {
  var Animate, Cell, Game, SandMan, start_game, starting_condition;

  Game = (function() {

    function Game(height, width, cell_size) {
      this.height = height;
      this.width = width;
      this.cell_size = cell_size;
      this.height = parseInt(this.height / this.cell_size) + 8;
      this.width = parseInt(this.width / this.cell_size) + 8;
      this.cell_size = this.cell_size;
      this.universe = null;
    }

    Game.prototype.initialize_universe = function() {
      var height_count, width_count, _results;
      height_count = 0;
      this.universe = new Array(this.height);
      _results = [];
      while (height_count < this.height) {
        this.universe[height_count] = new Array(this.width);
        width_count = 0;
        while (width_count < this.width) {
          this.universe[height_count][width_count] = new Cell(width_count, height_count);
          width_count += 1;
        }
        _results.push(height_count += 1);
      }
      return _results;
    };

    Game.prototype.initial_state = function(ary) {
      var cell, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = ary.length; _i < _len; _i++) {
        cell = ary[_i];
        _results.push(this.universe[cell.y][cell.x].alive = true);
      }
      return _results;
    };

    return Game;

  })();

  SandMan = (function() {

    function SandMan(universe, animate, tick_limit) {
      this.universe = universe;
      this.animate = animate;
      this.tick_limit = tick_limit;
      this.current_tick = 0;
    }

    SandMan.prototype.evaluate_current_universe = function() {
      var cell, cell_index, neighbors, row, row_index, _i, _len, _ref, _results;
      _ref = this.universe;
      _results = [];
      for (row_index = _i = 0, _len = _ref.length; _i < _len; row_index = ++_i) {
        row = _ref[row_index];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (cell_index = _j = 0, _len1 = row.length; _j < _len1; cell_index = ++_j) {
            cell = row[cell_index];
            neighbors = this.evaluate_neighbors(cell);
            _results1.push(this.determine_cell_state(cell, neighbors));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    SandMan.prototype.evaluate_next_universe = function() {
      var cell, cell_index, row, row_index, _i, _len, _ref, _results;
      _ref = this.universe;
      _results = [];
      for (row_index = _i = 0, _len = _ref.length; _i < _len; row_index = ++_i) {
        row = _ref[row_index];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (cell_index = _j = 0, _len1 = row.length; _j < _len1; cell_index = ++_j) {
            cell = row[cell_index];
            _results1.push(cell.alive = cell.next);
          }
          return _results1;
        })());
      }
      return _results;
    };

    SandMan.prototype.tick = function() {
      this.evaluate_current_universe();
      this.evaluate_next_universe();
      this.animate.draw_universe(this.universe);
      return this.current_tick += 1;
    };

    SandMan.prototype.is_not_border = function(cell) {
      return this.is_not_top(cell) && this.is_not_bottom(cell) && this.is_not_left(cell) && this.is_not_right(cell);
    };

    SandMan.prototype.is_not_top = function(cell) {
      return cell.y !== 0;
    };

    SandMan.prototype.is_not_bottom = function(cell) {
      return cell.y !== this.universe.length - 1;
    };

    SandMan.prototype.is_not_left = function(cell) {
      return cell.x !== 0;
    };

    SandMan.prototype.is_not_right = function(cell) {
      return cell.x !== this.universe[0].length - 1;
    };

    SandMan.prototype.evaluate_neighbors = function(cell) {
      var alive_neighbors;
      alive_neighbors = 0;
      alive_neighbors += this.above_neighbors(cell);
      alive_neighbors += this.next_to_neighbors(cell);
      alive_neighbors += this.below_neighbors(cell);
      return alive_neighbors;
    };

    SandMan.prototype.above_neighbors = function(cell) {
      var alive_neighbors;
      alive_neighbors = 0;
      if (this.is_not_top(cell)) {
        if (this.universe[cell.y - 1][cell.x].alive === true) {
          alive_neighbors += 1;
        }
        if (this.is_not_left(cell)) {
          if (this.universe[cell.y - 1][cell.x - 1].alive === true) {
            alive_neighbors += 1;
          }
        }
        if (this.is_not_right(cell)) {
          if (this.universe[cell.y - 1][cell.x + 1].alive === true) {
            alive_neighbors += 1;
          }
        }
      }
      return alive_neighbors;
    };

    SandMan.prototype.next_to_neighbors = function(cell) {
      var alive_neighbors;
      alive_neighbors = 0;
      if (this.is_not_left(cell)) {
        if (this.universe[cell.y][cell.x - 1].alive === true) {
          alive_neighbors += 1;
        }
      }
      if (this.is_not_right(cell)) {
        if (this.universe[cell.y][cell.x + 1].alive === true) {
          alive_neighbors += 1;
        }
      }
      return alive_neighbors;
    };

    SandMan.prototype.below_neighbors = function(cell) {
      var alive_neighbors;
      alive_neighbors = 0;
      if (this.is_not_bottom(cell)) {
        if (this.universe[cell.y + 1][cell.x].alive === true) {
          alive_neighbors += 1;
        }
        if (this.is_not_left(cell)) {
          if (this.universe[cell.y + 1][cell.x - 1].alive === true) {
            alive_neighbors += 1;
          }
        }
        if (this.is_not_right(cell)) {
          if (this.universe[cell.y + 1][cell.x + 1].alive === true) {
            alive_neighbors += 1;
          }
        }
      }
      return alive_neighbors;
    };

    SandMan.prototype.determine_cell_state = function(cell, neighbor_count) {
      if (cell.alive === true) {
        if (neighbor_count < 2) {
          cell.next = false;
        }
        if (neighbor_count === 2 || neighbor_count === 3) {
          cell.next = true;
        }
        if (neighbor_count > 3) {
          return cell.next = false;
        }
      } else {
        if (neighbor_count === 3) {
          return cell.next = true;
        }
      }
    };

    return SandMan;

  })();

  Cell = (function() {

    function Cell(x, y) {
      this.x = x;
      this.y = y;
      this.x = this.x;
      this.y = this.y;
      this.alive = false;
      this.next = false;
    }

    return Cell;

  })();

  Animate = (function() {

    function Animate(id, canvas_height, canvas_width, stroke, frame_rate) {
      this.id = id;
      this.canvas_height = canvas_height;
      this.canvas_width = canvas_width;
      this.stroke = stroke;
      this.frame_rate = frame_rate;
      this.ctx = document.getElementById("" + this.id).getContext("2d");
      this.height = this.canvas_height;
      this.width = this.canvas_width;
      this.stroke = this.stroke;
      this.list_size = 0;
      this.frame_rate = this.frame_rate;
    }

    Animate.prototype.reset_canvas = function() {
      return this.ctx.clearRect(0, 0, this.height, this.width);
    };

    Animate.prototype.draw_universe = function(array) {
      var cell, cell_index, row, row_index, _i, _len, _results;
      _results = [];
      for (row_index = _i = 0, _len = array.length; _i < _len; row_index = ++_i) {
        row = array[row_index];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (cell_index = _j = 0, _len1 = row.length; _j < _len1; cell_index = ++_j) {
            cell = row[cell_index];
            _results1.push(this.draw_frame(cell));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Animate.prototype.draw_frame = function(current_cell) {
      switch (current_cell.alive) {
        case false:
          this.ctx.clearRect(current_cell.x * this.stroke, current_cell.y * this.stroke, this.stroke, this.stroke);
          this.ctx.fillStyle = "rgb(45,123,200)";
          return this.ctx.fillRect(current_cell.x * this.stroke, current_cell.y * this.stroke, this.stroke, this.stroke);
        case true:
          this.ctx.clearRect(current_cell.x * this.stroke, current_cell.y * this.stroke, this.stroke, this.stroke);
          this.ctx.fillStyle = "rgb(255,153,0)";
          return this.ctx.fillRect(current_cell.x * this.stroke, current_cell.y * this.stroke, this.stroke, this.stroke);
      }
    };

    return Animate;

  })();

  $(document).ready(function() {
    var animate, canvas_height, canvas_width, cell_size, frame_rate, game, sandman, start;
    start = [];
    start[0] = new Cell(19, 15);
    start[1] = new Cell(20, 15);
    start[2] = new Cell(20, 16);
    start[3] = new Cell(24, 16);
    start[4] = new Cell(25, 16);
    start[5] = new Cell(26, 16);
    start[6] = new Cell(25, 14);
    start[7] = new Cell(5, 5);
    start[8] = new Cell(6, 5);
    start[9] = new Cell(7, 5);
    frame_rate = 50;
    cell_size = 10;
    canvas_height = parseInt($('#game').css('height').replace("px", ""));
    canvas_width = parseInt($('#game').css('width').replace("px", ""));
    animate = new Animate("game", canvas_height, canvas_width, cell_size, frame_rate);
    game = new Game(canvas_height, canvas_width, cell_size);
    game.initialize_universe();
    game.initial_state(gospers_glider_gun);
    animate.draw_universe(game.universe);
    sandman = new SandMan(game.universe, animate, 500);
    $('#hidden_stop').val(false);
    $('#stop').toggle(function() {
      $('#hidden_stop').val(true);
      return $('#stop').html("Resume");
    }, function() {
      $('#hidden_stop').val(false);
      return $('#stop').html("Stop");
    });
    $('#start').click(function() {
      return start_game(sandman, frame_rate);
    });
    return $('.selection').click(function() {
      var _this = this;
      $('.selected').removeClass("selected");
      $(this).addClass("selected");
      $('#hidden_stop').val(true);
      return window.setTimeout(function() {
        var selection;
        game.initialize_universe();
        selection = starting_condition($(_this).attr("id"));
        game.initial_state(selection);
        animate.draw_universe(game.universe);
        sandman.universe = game.universe;
        return $('#start').unbind('click').click(function() {
          $('#hidden_stop').val(false);
          return start_game(sandman, frame_rate);
        });
      }, 500);
    });
  });

  start_game = function(sandman, frame_rate) {
    var _this = this;
    if ($('#hidden_stop').val() === false) {
      sandman.tick();
    }
    return window.setTimeout(function() {
      return start_game(sandman, stop, frame_rate);
    }, frame_rate);
  };

  starting_condition = function(selection) {
    var acorn, cell, diehard, gospers_glider_gun, height_count, new_cell, new_cell2, new_cell3, new_cell4, r_pentomino, random, universe;
    switch (selection) {
      case "r_pentomino":
        r_pentomino = [];
        r_pentomino[0] = new Cell(20, 15);
        r_pentomino[1] = new Cell(21, 15);
        r_pentomino[2] = new Cell(20, 16);
        r_pentomino[3] = new Cell(20, 17);
        r_pentomino[4] = new Cell(19, 16);
        return r_pentomino;
      case "diehard":
        diehard = [];
        diehard[0] = new Cell(20, 20);
        diehard[1] = new Cell(21, 20);
        diehard[2] = new Cell(21, 21);
        diehard[3] = new Cell(26, 19);
        diehard[4] = new Cell(26, 21);
        diehard[5] = new Cell(25, 21);
        diehard[6] = new Cell(27, 21);
        return diehard;
      case "acorn":
        acorn = [];
        acorn[0] = new Cell(54, 20);
        acorn[1] = new Cell(55, 20);
        acorn[2] = new Cell(55, 18);
        acorn[3] = new Cell(57, 19);
        acorn[4] = new Cell(58, 20);
        acorn[5] = new Cell(59, 20);
        acorn[6] = new Cell(60, 20);
        return acorn;
      case "gospers_glider_gun":
        gospers_glider_gun = [];
        gospers_glider_gun[0] = new Cell(2, 7);
        gospers_glider_gun[1] = new Cell(3, 7);
        gospers_glider_gun[2] = new Cell(2, 8);
        gospers_glider_gun[3] = new Cell(3, 8);
        gospers_glider_gun[4] = new Cell(12, 7);
        gospers_glider_gun[5] = new Cell(12, 8);
        gospers_glider_gun[6] = new Cell(12, 9);
        gospers_glider_gun[7] = new Cell(13, 6);
        gospers_glider_gun[8] = new Cell(14, 5);
        gospers_glider_gun[9] = new Cell(15, 5);
        gospers_glider_gun[10] = new Cell(13, 10);
        gospers_glider_gun[11] = new Cell(14, 11);
        gospers_glider_gun[12] = new Cell(15, 11);
        gospers_glider_gun[13] = new Cell(16, 8);
        gospers_glider_gun[14] = new Cell(17, 6);
        gospers_glider_gun[15] = new Cell(18, 7);
        gospers_glider_gun[16] = new Cell(18, 8);
        gospers_glider_gun[17] = new Cell(18, 9);
        gospers_glider_gun[18] = new Cell(17, 10);
        gospers_glider_gun[19] = new Cell(19, 8);
        gospers_glider_gun[20] = new Cell(22, 5);
        gospers_glider_gun[21] = new Cell(23, 5);
        gospers_glider_gun[22] = new Cell(22, 6);
        gospers_glider_gun[23] = new Cell(23, 6);
        gospers_glider_gun[24] = new Cell(22, 7);
        gospers_glider_gun[25] = new Cell(23, 7);
        gospers_glider_gun[26] = new Cell(24, 4);
        gospers_glider_gun[27] = new Cell(24, 8);
        gospers_glider_gun[28] = new Cell(26, 4);
        gospers_glider_gun[29] = new Cell(26, 3);
        gospers_glider_gun[30] = new Cell(26, 8);
        gospers_glider_gun[31] = new Cell(26, 9);
        gospers_glider_gun[32] = new Cell(36, 5);
        gospers_glider_gun[33] = new Cell(36, 6);
        gospers_glider_gun[34] = new Cell(37, 5);
        gospers_glider_gun[35] = new Cell(37, 6);
        return gospers_glider_gun;
      case "random":
        height_count = 0;
        universe = new Array(40);
        while (height_count < 40) {
          random = Math.floor(Math.random() * 1000);
          cell = new Cell(Math.floor((Math.random() * 100) % 50), Math.floor((Math.random() * 100) % 20));
          if (random % 3 === 0) {
            cell.alive = true;
          }
          if (cell.alive) {
            universe[height_count] = cell;
            new_cell = new Cell(cell.x + 1, cell.y + 1);
            new_cell.active = true;
            universe[height_count + 1] = new_cell;
            new_cell2 = new Cell(cell.x - 1, cell.y);
            new_cell2.active = true;
            universe[height_count + 2] = new_cell2;
            new_cell3 = new Cell(cell.x - 1, cell.y + 1);
            new_cell3.active = true;
            universe[height_count + 3] = new_cell3;
            new_cell4 = new Cell(cell.x - 1, cell.y - 1);
            new_cell4.active = true;
            universe[height_count + 4] = new_cell4;
            height_count += 4;
          }
        }
        return universe;
    }
  };

}).call(this);
